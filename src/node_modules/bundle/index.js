'use strict';

/**
 * @module Bundle
 * @returns {exports}
 */
var Bundle = function () {
    var that = this;
    var accountList  = require('./accountData.js');
    var cardList     = require('./cardData.js');
    var bundleList   = require('./bundleData.js');
    var validUserProperties = {
        age: [0, 1, 2],
        isStudent: [true, false],
        income: [0, 1, 2, 3]
    };
    var currentBundle = null;
    var clientProperties = null;

    var validateUserProperties = function ( properties ) {
        if ( !properties || !(properties instanceof Object) ) return new Error('User properties not defined');
        if ( validUserProperties.age.indexOf(properties.age) === -1 ) return new RangeError('Age out of range [0-2]');
        if ( typeof properties.isStudent !== 'boolean' ) return new TypeError('Student status must be boolean');
        if ( validUserProperties.income.indexOf(properties.income) === -1 ) return new RangeError('Income out of range [0-3]');
        return true;
    };

    var validateCard = function ( name, bundle ) {

        bundle = bundle || that.getCurrentBundle();

        if ( bundle === null )
            return new Error('No bundle selected. Pass user properties to getBundleSuggestion() first');

        if ( clientProperties === null || !(clientProperties instanceof Object) )
            return new Error('No client properties set. Pass user properties to getBundleSuggestion() first');

        if ( typeof name !== 'string' )
            return new Error('Card name is not a string');

        if ( typeof cardList[name] !== 'object' )
            return new ReferenceError('Wrong Card name specified');

        var result = true;
        for ( let ruleKey in cardList[name].rules ) {
            let rule = cardList[name].rules[ruleKey];
            var value = clientProperties[ruleKey];

            if ( rule.indexOf(value) === -1 ) {
                result = new Error('"' + ruleKey + '" value "' + value + '" does not match ' + name + ' requirements: [' + rule.toString() + ']');
                break;
            }
        }

        if ( cardList[name].accountIsRequired ) {
            if ( bundle.account === null ) result = new Error('"' + cardList[name].name + '" requires one of Accounts to exist in the bundle');
        }

        return result;
    };

    var validateAccount = function ( name, bundle ) {

        bundle = bundle || that.getCurrentBundle();

        if ( bundle === null )
            return new Error('No bundle selected. Pass user properties to getBundleSuggestion() first')

        if ( clientProperties === null || !(clientProperties instanceof Object) )
            return new Error('No client properties set. Pass user properties to getBundleSuggestion() first')

        if ( typeof name !== 'string' )
            return new Error('Account name is not a string');

        if ( typeof accountList[name] !== 'object' )
            return new ReferenceError('Wrong account name specified: ' + name);

        var result = true;
        for ( let ruleKey in accountList[name].rules ) {
            let rule = accountList[name].rules[ruleKey];
            var value = clientProperties[ruleKey];

            if ( rule.indexOf(value) === -1 ) {
                result = new Error('"' + ruleKey + '" value "' + value + '" does not match ' + name + ' requirements: [' + rule.toString() + ']');
                break;
            }
        }

        return result;
    };


    /**
     * method to get all available Accounts
     * @returns {Array} Array of available Accounts
     */
    this.getAvailableAccounts = function () {
        var result = [];
        for ( let accountKey in accountList ) {
            if ( validateAccount(accountKey) === true ) result.push(accountKey);
        }
        return result;
    };


    /**
     * method to get all available Cards
     * @returns {Array} Array of available Cards
     */
    this.getAvailableCards = function () {
        var result = [];
        for ( let cardKey in cardList ) {
            if ( validateCard(cardKey) === true ) result.push(cardKey);
        }
        return result;
    };


    /**
     * method for getting suggested Bundle by client's properties
     * @param {Object} properties - client's properties
     * @param {Number} properties.age - client's age index
     * @param {Boolean} properties.isStudent - client's student status
     * @param {Number} properties.income - client's income index
     * @returns {Object} current Bundle
     */
    this.getBundleSuggestion = function ( properties ) {

        var validationResult = validateUserProperties(properties);
        if ( validationResult !== true ) {
            throw validationResult;
        }

        clientProperties = properties;

        var result = [];

        for ( let bundleKey in bundleList ) {
            let bundle = bundleList[bundleKey];

            let success = true;

            for ( let ruleKey in bundle.rules ) {
                let rule = bundle.rules[ruleKey];

                if ( rule.indexOf(properties[ruleKey]) === -1 ) {
                    success = false;
                    break;
                }
            }

            if ( success ) {
                // prepend with higher value
                if ( result.length && result[0].value < bundle.value ) {
                    result.unshift(bundle);
                } else {
                    result.push(bundle);
                }
            }

        }

        if ( result.length ) {
            currentBundle = {
                name: result[0].name,
                account: result[0].account,
                card: result[0].card.slice() // make a copy of cards array
            };

            return that.getCurrentBundle();

        } else {
            return false;
        }
    };


    /**
     * method for getting current Bundle
     * @returns {Object} current Bundle
     */
    this.getCurrentBundle = function () {
        return currentBundle;
    };


    /**
     * method for unsetting current Bundle
     */
    this.clearCurrentBundle = function () {
        currentBundle = null;
    };


    /**
     * method for setting Account type
     * @param {string} name - Account type name
     * @returns {Object} current Bundle
     */
    this.setAccount = function ( name ) {

        var validationResult = validateAccount(name);
        if ( validationResult !== true ) {
            throw validationResult;

        } else {
            currentBundle.account = name;

            // set name to Custom if any modifications are done
            currentBundle.name = 'Custom';

            return that.getCurrentBundle();
        }
    };


    /**
     * method for removing Account
     * @returns {Object} current Bundle
     */
    this.removeAccount = function () {

        // make a copy for testing before making any changes. hackish, I know ;)
        var tmpBundle = JSON.parse(JSON.stringify(currentBundle));
        tmpBundle.account = null;
        tmpBundle.card.forEach(function(card) {
            var validationResult = validateCard(card, tmpBundle); // pass a copy
            if ( validationResult !== true )
                throw new Error('Can not remove Account: ' + validationResult.message);
        });

        // test passed. make actual changes to currentBundle
        currentBundle.account = null;

        return that.getCurrentBundle();

    };


    /**
     * method for adding new Card to Bundle
     * @param {string} name - Card's name
     * @returns {Object} current Bundle
     */
    this.addCard = function ( name ) {
        var validationResult = validateCard(name);
        if ( validationResult !== true ) {
            throw validationResult;

        } else if ( currentBundle.card.indexOf(name) !== -1 ) {
            throw new Error('Card "' + name + '" exists in current bundle');

        } else {
            currentBundle.card.push(name);
            return that.getCurrentBundle();
        }
    };


    /**
     * method for removing Card from Bundle
     * @param {string} name - Card's name
     * @returns {Object} current Bundle
     */
    this.removeCard = function ( name ) {
        if ( that.getCurrentBundle() === null )
            throw new Error('No bundle selected. Pass user properties to getBundleSuggestion() first');

        if ( clientProperties === null || !(clientProperties instanceof Object) )
            throw new Error('No client properties set. Pass user properties to getBundleSuggestion() first');

        if ( typeof name !== 'string' )
            throw new TypeError('Wrong type or no Card name specified');

        var index = currentBundle.card.indexOf(name);

        if ( index === -1 )
            throw new ReferenceError('Card "' + name + '" does not exist in current bundle');

        currentBundle.card.splice(index, 1);

        return that.getCurrentBundle();

    };

};



module.exports = new Bundle();